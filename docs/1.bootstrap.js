(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[,function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(2),i=n(3);(new(function(){function t(){this.canvas=document.getElementById("screen"),this.canvas.setAttribute("width",""+t.CANVAS_WIDTH),this.canvas.setAttribute("height",""+t.CANVAS_HEIGHT),(window.devicePixelRatio?window.devicePixelRatio:1)>1&&window.screen.width<t.CANVAS_WIDTH&&(this.canvas.style.width="320px",this.canvas.style.height="240px"),this.canvas_context=this.canvas.getContext("2d"),this.canvas_image_data=this.canvas_context.createImageData(t.CANVAS_WIDTH,t.CANVAS_HEIGHT),this.screen=new r.Screen(t.CANVAS_WIDTH,t.CANVAS_HEIGHT),this.image_data=new Uint8Array(i.memory.buffer,this.screen.get_canvas_bitmap_ptr(),t.CANVAS_WIDTH*t.CANVAS_HEIGHT*t.RGBA)}return t.prototype.loop=function(){var t=this;this.screen.update(),this.screen.draw(),this.canvas_image_data.data.set(this.image_data),this.canvas_context.putImageData(this.canvas_image_data,0,0),this.anime_id=requestAnimationFrame(function(){return t.loop})},t.CANVAS_WIDTH=768,t.CANVAS_HEIGHT=576,t.RGBA=4,t}())).loop()},function(t,e,n){"use strict";n.r(e),n.d(e,"Screen",function(){return p}),n.d(e,"__wbg_new_59cb74e423758ede",function(){return g}),n.d(e,"__wbg_stack_558ba5917b466edd",function(){return A}),n.d(e,"__wbg_error_4bb6c2a97407129a",function(){return m}),n.d(e,"__wbindgen_object_drop_ref",function(){return v}),n.d(e,"__wbindgen_throw",function(){return y});var r=n(3);const i=new Array(32);i.fill(void 0),i.push(void 0,null,!0,!1);let c=i.length;function o(t){return i[t]}let a,s=0,_=new TextEncoder("utf-8"),u=null;function f(){return null!==u&&u.buffer===r.memory.buffer||(u=new Uint8Array(r.memory.buffer)),u}a="function"==typeof _.encodeInto?function(t){let e=t.length,n=r.__wbindgen_malloc(e),i=0;{const e=f();for(;i<t.length;i++){const r=t.charCodeAt(i);if(r>127)break;e[n+i]=r}}if(i!==t.length){t=t.slice(i),n=r.__wbindgen_realloc(n,e,e=i+3*t.length);const c=f().subarray(n+i,n+e);i+=_.encodeInto(t,c).written}return s=i,n}:function(t){let e=t.length,n=r.__wbindgen_malloc(e),i=0;{const e=f();for(;i<t.length;i++){const r=t.charCodeAt(i);if(r>127)break;e[n+i]=r}}if(i!==t.length){const c=_.encode(t.slice(i));n=r.__wbindgen_realloc(n,e,e=i+c.length),f().set(c,n+i),i+=c.length}return s=i,n};let d=null;function l(){return null!==d&&d.buffer===r.memory.buffer||(d=new Int32Array(r.memory.buffer)),d}let h=new TextDecoder("utf-8");function w(t,e){return h.decode(f().subarray(t,t+e))}function b(t){const e=o(t);return function(t){t<36||(i[t]=c,c=t)}(t),e}class p{static __wrap(t){const e=Object.create(p.prototype);return e.ptr=t,e}free(){const t=this.ptr;this.ptr=0,r.__wbg_screen_free(t)}constructor(t,e){const n=r.screen_new(t,e);return p.__wrap(n)}get_canvas_bitmap_ptr(){return r.screen_get_canvas_bitmap_ptr(this.ptr)}update(){r.screen_update(this.ptr)}draw(){r.screen_draw(this.ptr)}}const g=function(){return function(t){c===i.length&&i.push(i.length+1);const e=c;return c=i[e],i[e]=t,e}(new Error)},A=function(t,e){const n=o(e).stack,r=a(n),i=s;l()[t/4+0]=r,l()[t/4+1]=i},m=function(t,e){const n=w(t,e).slice();r.__wbindgen_free(t,1*e),console.error(n)},v=function(t){b(t)},y=function(t,e){throw new Error(w(t,e))}},function(t,e,n){"use strict";var r=n.w[t.i];for(var i in n.r(e),r)"__webpack_init__"!=i&&(e[i]=r[i]);n(2);r.__webpack_init__()}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,